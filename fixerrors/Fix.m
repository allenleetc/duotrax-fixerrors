classdef Fix
  
  properties (Constant)
    % TODO: dt
    FLDSINFO = {
      'x' 'timeseries' false
      'y' 'timeseries' false
      'a' 'timeseries' false
      'b' 'timeseries' false
      'theta' 'timeseries' false
      'wing_anglel' 'timeseries' false
      'wing_angler' 'timeseries' false
      'firstframe' 'special' false % matches for duotrax
      'endframe' 'special' false % etc
      'nframes' 'special' false
      'off' 'special' false
      'roi' 'match' false
      'arena' 'match' false
      'moviefile' 'match' false
      'dt' 'match' false
      'timestamps' 'timeseries' false
      'wingtype' 'timeseries' false
      'xwingl' 'timeseries' false
      'ywingl' 'timeseries' false
      'xwingr' 'timeseries' false
      'ywingr' 'timeseries' false
      'x_mm' 'timeseries' false
      'y_mm' 'timeseries' false
      'theta_mm' 'timeseries' false
      'a_mm' 'timeseries' false
      'b_mm' 'timeseries' false
      'pxpermm' 'match' false
      'fps' 'match' false
      'susp' 'timeseries' false  % Optional from here on
      'xpred' 'timeseries' true
      'ypred' 'timeseries' true
      'thetapred' 'timeseries' true % Generated by suspicious_seqs etc
      'dx' 'timeseries' true
      'dy' 'timeseries' true
      'v' 'timeseries' true
      'matname' 'match' true
      };
    FLDS = cell2table(Fix.FLDSINFO,'VariableNames',{'fld','type','rm'});
    FLDS_ALLKNOWN = Fix.FLDSINFO(:,1);
    FLDS_TIMESERIESDATA = lclInitFldsTS();
    FLDS_MATCH = lclInitFldsMatch();
    FLDS_RM = lclInitFldsRm();
    
    CONFIGFILE = lclInitConfigFile();
  end
  
  methods (Static)
    
    function val = cfgGetProp(prop)
      cfgfile = Fix.CONFIGFILE;
      if exist(cfgfile,'file')>0 && ismember(prop,who('-file',cfgfile))
        val = load(cfgfile,prop);
        val = val.(prop);
      else
        val = [];
      end
    end
    
    function cfgSetProp(prop,val)
      tmp = struct(prop,val); %#ok<NASGU>
      cfgfile = Fix.CONFIGFILE;
      if exist(cfgfile,'file')==2
        save(cfgfile,'-append','-struct','tmp');
      else
        save(cfgfile,'-struct','tmp');
      end
    end
    
  end
  
  methods (Static)
    
    function savename = createSavedProgFilename(moviename,trxname,ts)
      if exist('ts','var')==0
        ts = now;
      end
      [~,movienameS] = fileparts2(moviename);
      [trxpath,trxnameS] = fileparts2(trxname);
      savenameS = Fix.createSavedProgFilenameS(movienameS,trxnameS,ts);
      savename = fullfile(trxpath,savenameS);
    end    
    function savenameS = createSavedProgFilenameS(movienameS,trxnameS,ts)
      PAT = 'dtfeSavedProg@%s@%s@%s.mat';
      nowstr = datestr(ts,'yyyymmddTHHMMSS');
      savenameS = sprintf(PAT,movienameS,trxnameS,nowstr);
    end
    
    function savedProgFiles = findSavedProgFiles(moviename,trxname)
      [moviepath,movienameS] = fileparts2(moviename);
      [~,trxnameS] = fileparts2(trxname);
      dd = dir(fullfile(moviepath,'*.mat'));
      mats = {dd.name}';
      PAT = sprintf('dtfeSavedProg@%s@%s@[0-9]{8,8}T[0-9]{6,6}.mat$',...
        movienameS,trxnameS);
      tf = cellfun(@(x)~isempty(regexp(x,PAT,'once')),mats);
      mats = mats(tf);      
      savedProgFiles = cellfun(@(x)fullfile(moviepath,x),mats,'uni',0);
    end
    
  end
  
end

function flds = lclInitFldsTS()
flds = Fix.FLDS.fld(strcmp(Fix.FLDS.type,'timeseries'));
end
function flds = lclInitFldsMatch()
flds = Fix.FLDS.fld(strcmp(Fix.FLDS.type,'match'));
end
function flds = lclInitFldsRm()
flds = Fix.FLDS.fld(Fix.FLDS.rm);
end

function cfgfile = lclInitConfigFile()
fe = which('fixerrors');
cfgfile = strrep(fe,'fixerrors.m','.fixerrorsrc.mat');  
end